#ifndef _STACK_FRAME_H
#define _STACK_FRAME_H

// Includes


// Forward declaration
typedef struct __cilkrts_stack_frame __cilkrts_stack_frame;

/**
 * Every spawning function has a frame descriptor.  A spawning function
 * is a function that spawns or detaches.  Only spawning functions
 * are visible to the Cilk runtime.
 */
struct __cilkrts_stack_frame
{
    // Flags is a bitfield with values defined below. Client code
    /// initializes flags to 0 before the first Cilk operation.
    uint32_t flags;

    // call_parent points to the __cilkrts_stack_frame of the closest
    // ancestor spawning function, including spawn helpers, of this frame.
    // It forms a linked list ending at the first stolen frame.
    __cilkrts_stack_frame *  call_parent;

    // The client copies the worker from TLS here when initializing
    // the structure.  The runtime ensures that the field always points
    // to the __cilkrts_worker which currently "owns" the frame.
    __cilkrts_worker * worker;

    // Before every spawn and nontrivial sync the client function
    // saves its continuation here.
    __CILK_JUMP_BUFFER ctx;
};

#endif


// Forwarded declarations
typedef struct global_state_t        global_state_t;  ///< Forwarded declaration for global state
typedef struct local_state           local_state;     ///< Forwarded declaration for local state
typedef struct cilkred_map           cilkred_map;     ///< Forward declaration for reducer map

/// Forwarded declaration for system-dependent worker state
typedef struct __cilkrts_worker_sysdep_state
                                     __cilkrts_worker_sysdep_state;

struct __cilkrts_worker {
    // T and H pointers in the THE protocol
    // [shared read/write]
    __cilkrts_stack_frame * volatile * volatile tail;
    __cilkrts_stack_frame * volatile * volatile head;

    // Limit of the Lazy Task Queue, to detect queue overflow
    // [local read-only]
    __cilkrts_stack_frame * volatile *ltq_limit;

    // Worker id.
    // [local read-only]
    int32_t self;

    // Global state of the runtime system, opaque to the client.
    // [local read-only]
    global_state_t * g;

    // Additional per-worker state hidden from the client.
    // [shared read-only]
    local_state *l;

    // A slot that points to the currently executing Cilk frame.
    // [local read/write]
    __cilkrts_stack_frame *current_stack_frame;

    // Reserved space for a pointer.
    // Used to be __cilkrts_stack_frame *volatile *volatile saved_protected_tail;
    void* reserved;

    /**
     * System-dependent part of the worker state
     * [local read-only]
     */
    __cilkrts_worker_sysdep_state *sysdep;
};



